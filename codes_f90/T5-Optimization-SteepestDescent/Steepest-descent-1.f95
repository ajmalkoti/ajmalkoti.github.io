!ALGO: THE UPDATE SHOULD BE DONE IN THE FOLLOWING MANNER
!		Xn+1= Xn + ALPHA*Pn  	where alpha is a constant, updated in each iteration
!		Pn= -GRADIENT(FUNCTION(X))
! 		ALPHA= - Pn'* Pn
!				Pn'*H*Pn
!FUNCTIONS LIST:
! F; FX; FY; FXX; FYY; FXY; FYX; GRADIENT; HESSIAN,STEP

PROGRAM STEEPEST_DESCENT
IMPLICIT NONE
REAL (SELECTED_REAL_KIND(15,307))				:: X,Y,F0,F1,A(2,1),ALPHA,Pn(2,1),PI,EPS
REAL (SELECTED_REAL_KIND(15,307)), PARAMETER 	:: h=.00001

EPS=EPSILON(1.)
PI=4*ATAN(1.)

PRINT *, 'ENTER THE INTIAL GUESS FOR COORDINATE X AND Y: '
READ*, X,Y
A(1,1)=X
A(2,1)=Y
F0=F(X,Y)
OPEN(10, FILE="DATA5_23.DAT")

DO 
PRINT*, A,F0
WRITE (10,*) A, F0 

CALL GRADIENT(Pn,A(1,1),A(2,1))
ALPHA= MAGNITUDE(A(1,1),A(2,1))
A=A+ALPHA*Pn
F1=F(A(1,1),A(2,1))
IF (ABS(F1-F0)<EPS) EXIT
F0=F1
END DO

PRINT*, A,F0
PRINT *, 'THE FINAL SOLUTION IS : ', A
WRITE (10,*) A, F1
CONTAINS

!THE DE-JONG'S-FUNCTION IS DEFINED HERE
FUNCTION F(X,Y)
IMPLICIT NONE
REAL (SELECTED_REAL_KIND(15,307)) 	:: X,Y,F,PI
!F=X**2 + Y**2
F=100*((y**2-x**2)**2) + (1-x)**2
!PI=4*ATAN(1.)
!F=10+(X**2-10*COS(2*PI*X)) + (Y**2 + 10*COS(2*PI*Y))
END FUNCTION

!CALCULATING THE FIRST DERIVATIVE OF F WRT X
FUNCTION FX(X,Y)
IMPLICIT NONE
REAL (SELECTED_REAL_KIND(15,307))	:: X,Y,FX
FX=  (F(X+h,Y)- F(X-h,Y)) / (2*h)
END FUNCTION FX

!CALCULATING THE FIRST DERIVATIVE OF F WRT Y
FUNCTION FY(X,Y)
IMPLICIT NONE
REAL (SELECTED_REAL_KIND(15,307))	:: X,Y,FY
FY=  (F(X,Y+h)- F(X,Y-h)) / (2*h)
END FUNCTION FY

!CALCULATING THE SECOND DERIVATIVE OF FX WRT X
FUNCTION FXX(X,Y)
IMPLICIT NONE
REAL (SELECTED_REAL_KIND(15,307))	:: X,Y,FXX
FXX=  (FX(X+h,Y)- FX(X-h,Y)) / (2*h)
END FUNCTION FXX

!CALCULATING THE SECOND DERIVATIVE OF FY WRT Y
FUNCTION FYY(X,Y)
IMPLICIT NONE
REAL (SELECTED_REAL_KIND(15,307))	:: X,Y,FYY
FYY= (FY(X,Y+h)- FY(X,Y-h)) / (2*h)
END FUNCTION FYY

!CALCULATING THE SECOND DERIVATIVE OF FY WRT X
FUNCTION FYX(X,Y)
IMPLICIT NONE
REAL (SELECTED_REAL_KIND(15,307))	:: X,Y,FYX
FYX=  (FY(X+h,Y)- FY(X-h,Y)) / (2*h)
END FUNCTION FYX

!CALCULATING THE SECOND DERIVATIVE OF FX WRT Y
FUNCTION FXY(X,Y)
IMPLICIT NONE
REAL (SELECTED_REAL_KIND(15,307))	:: X,Y,FXY
FXY=  (FX(X,Y+h)- FX(X,Y-h)) / (2*h)
END FUNCTION FXY

!FUNC CALCULATING STEP SIZE
FUNCTION MAGNITUDE(X,Y)
IMPLICIT NONE
REAL (SELECTED_REAL_KIND(15,307))	:: X,Y,H(2,2),P(2,1),NR,DR,MAGNITUDE,Pt(1,2),temp(2,1)
CALL GRADIENT(P,X,Y)
Pt=TRANSPOSE(P)
CALL HESSIAN(H,X,Y)
Nr=MATMUL(Pt,P)
temp= MATMUL(H,P)
Dr=MATMUL(Pt,temp)
MAGNITUDE=-NR/DR
END FUNCTION MAGNITUDE

!CALCULATE THE GRADIENT
SUBROUTINE GRADIENT(G,X,Y)
IMPLICIT NONE
REAL (SELECTED_REAL_KIND(15,307)), INTENT(OUT) :: G(2,1)
REAL (SELECTED_REAL_KIND(15,307)), INTENT (IN) :: X,Y
G(1,1)= FX(X,Y)
G(2,1)= FY(X,Y)
END SUBROUTINE GRADIENT

!CALCULATING THE HESSIAN METRIX
SUBROUTINE HESSIAN(H,X,Y)
IMPLICIT NONE
REAL (SELECTED_REAL_KIND(15,307)), INTENT(OUT)::H(2,2)
REAL (SELECTED_REAL_KIND(15,307)), INTENT(IN) :: X,Y
H(1,1)=FXX(X,Y)
H(1,2)=FXY(X,Y)
H(2,1)=FYX(X,Y)
H(2,2)=FYY(X,Y)
END SUBROUTINE HESSIAN

END PROGRAM STEEPEST_DESCENT